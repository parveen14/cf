{
    "Description": "This is an example of a long running ECS service",
    "Parameters": {
        "VPC": {
            "Description": "The VPC that the ECS cluster is deployed to",
            "Type": "AWS::EC2::VPC::Id"
        },
        "Cluster": {
            "Description": "Please provide the ECS Cluster ID that this service should run on",
            "Type": "String"
        },
        "DesiredCount": {
            "Description": "How many instances of this task should we run across our cluster?",
            "Type": "Number",
            "Default": 2
        },
        "MaxCount": {
            "Description": "Maximum number of instances of this task we can run across our cluster",
            "Type": "Number",
            "Default": 3
        },
        "Listener": {
            "Description": "The Application Load Balancer listener to register with",
            "Type": "String"
        },
        "Path": {
            "Description": "The path to register with the Application Load Balancer",
            "Type": "String",
            "Default": "/"
        },
        "ECSServiceAutoScalingRoleARN": {
            "Description": "The ECS service auto scaling role ARN",
            "Type": "String"
        }
    },
    "Resources": {
        "Service": {
            "Type": "AWS::ECS::Service",
            "DependsOn": "ListenerRule",
            "Properties": {
                "Cluster": {
                    "Ref": "Cluster"
                },
                "Role": {
                    "Ref": "ServiceRole"
                },
                "DesiredCount": {
                    "Ref": "DesiredCount"
                },
                "TaskDefinition": {
                    "Ref": "TaskDefinition"
                },
                "LoadBalancers": [
                    {
                        "ContainerName": "website-service",
                        "ContainerPort": 8000,
                        "TargetGroupArn": {
                            "Ref": "TargetGroup"
                        }
                    }
                ]
            }
        },
        "TaskDefinition": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "Family": "website-service",
                "ContainerDefinitions": [
                    {
                        "Name": "website-service",
                        "Essential": true,
                        "Image": "amazon/amazon-ecs-sample",
                        "Memory": 128,
                        "PortMappings": [
                            {
                                "ContainerPort": 8000
                            }
                        ]
                    }
                ]
            }
        },
        "TargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Port": 80,
                "Protocol": "HTTP",
                "Matcher": {
                    "HttpCode": "200-299"
                },
                "HealthCheckIntervalSeconds": 10,
                "HealthCheckPath": "/",
                "HealthCheckProtocol": "HTTP",
                "HealthCheckTimeoutSeconds": 5,
                "HealthyThresholdCount": 2
            }
        },
        "ListenerRule": {
            "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
            "Properties": {
                "ListenerArn": {
                    "Ref": "Listener"
                },
                "Priority": 1,
                "Conditions": [
                    {
                        "Field": "path-pattern",
                        "Values": [
                            {
                                "Ref": "Path"
                            }
                        ]
                    }
                ],
                "Actions": [
                    {
                        "TargetGroupArn": {
                            "Ref": "TargetGroup"
                        },
                        "Type": "forward"
                    }
                ]
            }
        },
        "ServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": {
                    "Fn::Sub": "ecs-service-${AWS::StackName}"
                },
                "Path": "/",
                "AssumeRolePolicyDocument": "{\n    \"Statement\": [{\n        \"Effect\": \"Allow\",\n        \"Principal\": { \"Service\": [ \"ecs.amazonaws.com\" ]},\n        \"Action\": [ \"sts:AssumeRole\" ]\n    }]\n}\n",
                "Policies": [
                    {
                        "PolicyName": {
                            "Fn::Sub": "ecs-service-${AWS::StackName}"
                        },
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:AuthorizeSecurityGroupIngress",
                                        "ec2:Describe*",
                                        "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                                        "elasticloadbalancing:Describe*",
                                        "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                                        "elasticloadbalancing:DeregisterTargets",
                                        "elasticloadbalancing:DescribeTargetGroups",
                                        "elasticloadbalancing:DescribeTargetHealth",
                                        "elasticloadbalancing:RegisterTargets"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "ServiceScalableTarget": {
            "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
            "Properties": {
                "MaxCapacity": {
                    "Ref": "MaxCount"
                },
                "MinCapacity": {
                    "Ref": "DesiredCount"
                },
                "ResourceId": {
                    "Fn::Join": [
                        "/",
                        [
                            "service",
                            {
                                "Ref": "Cluster"
                            },
                            {
                                "Fn::GetAtt": [
                                    "Service",
                                    "Name"
                                ]
                            }
                        ]
                    ]
                },
                "RoleARN": {
                    "Ref": "ECSServiceAutoScalingRoleARN"
                },
                "ScalableDimension": "ecs:service:DesiredCount",
                "ServiceNamespace": "ecs"
            }
        },
        "ServiceScaleOutPolicy": {
            "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
            "Properties": {
                "PolicyName": "ServiceScaleOutPolicy",
                "PolicyType": "StepScaling",
                "ScalingTargetId": {
                    "Ref": "ServiceScalableTarget"
                },
                "StepScalingPolicyConfiguration": {
                    "AdjustmentType": "ChangeInCapacity",
                    "Cooldown": 1800,
                    "MetricAggregationType": "Average",
                    "StepAdjustments": [
                        {
                            "MetricIntervalLowerBound": 0,
                            "ScalingAdjustment": 1
                        }
                    ]
                }
            }
        },
        "ServiceScaleInPolicy": {
            "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
            "Properties": {
                "PolicyName": "ServiceScaleInPolicy",
                "PolicyType": "StepScaling",
                "ScalingTargetId": {
                    "Ref": "ServiceScalableTarget"
                },
                "StepScalingPolicyConfiguration": {
                    "AdjustmentType": "ChangeInCapacity",
                    "Cooldown": 1800,
                    "MetricAggregationType": "Average",
                    "StepAdjustments": [
                        {
                            "MetricIntervalUpperBound": 0,
                            "ScalingAdjustment": -1
                        }
                    ]
                }
            }
        }
    }
}